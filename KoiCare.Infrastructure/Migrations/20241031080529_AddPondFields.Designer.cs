// <auto-generated />
using System;
using KoiCare.Infrastructure.Dependencies.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace KoiCare.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241031080529_AddPondFields")]
    partial class AddPondFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("KoiCare.Domain.Entities.BlogPost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.FeedCalculation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CalculationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("DailyAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Frequency")
                        .HasColumnType("numeric");

                    b.Property<int>("KoiIndividualId")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("KoiIndividualId");

                    b.ToTable("FeedCalculations");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.FeedingSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Period")
                        .HasColumnType("numeric");

                    b.Property<int>("PondId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PondId");

                    b.ToTable("FeedingSchedules");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.KoiGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("KoiGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Nhóm 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Nhóm 2"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Nhóm 3"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Nhóm 4"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Nhóm 5"
                        });
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.KoiGrowth", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("KoiIndividualId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("MeasuredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("KoiIndividualId");

                    b.ToTable("KoiGrowths");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.KoiIndividual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("Age")
                        .HasColumnType("numeric");

                    b.Property<string>("Breed")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("KoiTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Length")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Origin")
                        .HasColumnType("text");

                    b.Property<int>("PondId")
                        .HasColumnType("integer");

                    b.Property<int?>("Shape")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("KoiTypeId");

                    b.HasIndex("PondId");

                    b.ToTable("KoiIndividuals");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.KoiType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("KoiGroupId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("KoiGroupId");

                    b.ToTable("KoiTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Kohaku là loại koi có nền trắng với các mảng đỏ (hi thường gọi là “hi”) trên thân. Đây là loại koi cơ bản và được xem là quan trọng nhất trong các dòng cá koi.",
                            KoiGroupId = 1,
                            Name = "Kohaku"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Sanke có nền trắng với các mảng đỏ và đen trên thân. Mảng đen thường tập trung ở phần thân sau và không xuất hiện trên đầu.",
                            KoiGroupId = 1,
                            Name = "Taisho Sanke (Sanke)"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Showa có nền đen với các mảng đỏ và trắng trên thân. Khác với Sanke, Showa có mảng đen (sumi) xuất hiện trên đầu.",
                            KoiGroupId = 1,
                            Name = "Showa Sanshoku (Showa)"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Utsuri có nền đen với các mảng màu khác như trắng, đỏ, hoặc vàng. Tùy thuộc vào màu phụ, Utsuri được phân loại thành Shiro Utsuri (đen và trắng), Hi Utsuri (đen và đỏ), hoặc Ki Utsuri (đen và vàng).",
                            KoiGroupId = 1,
                            Name = "Utsurimono (Utsuri)"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Bekko có nền trắng, đỏ, hoặc vàng với các mảng đen (sumi) trên thân. Loại koi này có ba biến thể chính là Shiro Bekko (trắng và đen), Aka Bekko (đỏ và đen), và Ki Bekko (vàng và đen).",
                            KoiGroupId = 1,
                            Name = "Bekko"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Asagi có thân màu xanh lơ với các vảy được xếp thành hàng theo kiểu lưới, bụng và các vây thường có màu đỏ hoặc cam.",
                            KoiGroupId = 2,
                            Name = "Asagi"
                        },
                        new
                        {
                            Id = 12,
                            Description = "Shusui là một phiên bản không có vảy của Asagi, với thân màu xanh và các mảng đỏ hoặc cam chạy dọc theo thân và bụng.",
                            KoiGroupId = 2,
                            Name = "Shusui"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Tancho có nền trắng tinh khiết với một đốm đỏ tròn trên đầu, tượng trưng cho lá cờ của Nhật Bản. Đây là một loại cá rất quý hiếm và được yêu thích.",
                            KoiGroupId = 3,
                            Name = "Tancho"
                        },
                        new
                        {
                            Id = 10,
                            Description = "Ogons là dòng koi kim loại với màu sắc sáng bóng, thường có các màu như vàng, bạch kim, hoặc đồng.",
                            KoiGroupId = 3,
                            Name = "Ogons"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Kawarimono là một nhóm gồm những loại koi không thuộc các dòng cơ bản khác. Chúng có nhiều hình dạng và màu sắc khác nhau, từ xanh lá, đen, đến bạc.",
                            KoiGroupId = 4,
                            Name = "Kawarimono"
                        },
                        new
                        {
                            Id = 11,
                            Description = "Doitsu Koi là một dòng koi không có vảy hoặc chỉ có vảy dọc theo phần lưng. Loại này có thể xuất hiện trong nhiều biến thể như Kohaku, Sanke, và Showa.",
                            KoiGroupId = 4,
                            Name = "Doitsu Koi"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Goshiki có màu nền xanh xám với các vảy màu đen, trắng, đỏ, và xanh. Màu đỏ thường chiếm ưu thế ở phần thân.",
                            KoiGroupId = 5,
                            Name = "Goshiki"
                        });
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.PerfectWaterVolume", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("KoiTypeId")
                        .HasColumnType("integer");

                    b.Property<decimal>("MaxVolume")
                        .HasColumnType("numeric");

                    b.Property<decimal>("MinVolume")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OptimalVolume")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RecommendedSaltLevel")
                        .HasColumnType("numeric");

                    b.Property<decimal>("WaterLevel")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("KoiTypeId");

                    b.ToTable("PerfectWaterVolumes");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.Pond", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgeRange")
                        .HasColumnType("integer");

                    b.Property<decimal>("Depth")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DrainageCount")
                        .HasColumnType("numeric");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<int?>("KoiGroupId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Length")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OwnerId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PumpCapacity")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Width")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("KoiGroupId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Ponds");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.SaltRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PondId")
                        .HasColumnType("integer");

                    b.Property<decimal>("RequiredAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PondId")
                        .IsUnique();

                    b.ToTable("SaltRequirements");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.ServingSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeRange")
                        .HasColumnType("integer");

                    b.Property<string>("DailyFrequency")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FoodDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("KoiGroupId")
                        .HasColumnType("integer");

                    b.Property<decimal>("WeightPercent")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("KoiGroupId");

                    b.ToTable("ServingSizes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeRange = 1,
                            DailyFrequency = "3",
                            FoodDescription = "Hạt nhỏ giàu protein (35-40%) / vitamin tăng cường màu sắc",
                            KoiGroupId = 1,
                            WeightPercent = 0.04m
                        },
                        new
                        {
                            Id = 2,
                            AgeRange = 2,
                            DailyFrequency = "2",
                            FoodDescription = "Hạt protein cao (30-35%), bổ sung vitamin và khoáng chất",
                            KoiGroupId = 1,
                            WeightPercent = 0.015m
                        },
                        new
                        {
                            Id = 3,
                            AgeRange = 3,
                            DailyFrequency = "1-2",
                            FoodDescription = "Hạt lớn, protein 30%, nhiều chất xơ để hỗ trợ tiêu hóa",
                            KoiGroupId = 1,
                            WeightPercent = 0.01m
                        },
                        new
                        {
                            Id = 4,
                            AgeRange = 1,
                            DailyFrequency = "3",
                            FoodDescription = "Hạt protein cao (35-40%), nhiều carotenoid cho màu sắc",
                            KoiGroupId = 2,
                            WeightPercent = 0.04m
                        },
                        new
                        {
                            Id = 5,
                            AgeRange = 2,
                            DailyFrequency = "2",
                            FoodDescription = "Protein 30-35%, bổ sung thêm canxi và chất xơ",
                            KoiGroupId = 2,
                            WeightPercent = 0.015m
                        },
                        new
                        {
                            Id = 6,
                            AgeRange = 3,
                            DailyFrequency = "1-2",
                            FoodDescription = "Hạt lớn, bổ sung vitamin tăng cường",
                            KoiGroupId = 2,
                            WeightPercent = 0.01m
                        },
                        new
                        {
                            Id = 7,
                            AgeRange = 1,
                            DailyFrequency = "3",
                            FoodDescription = "Protein cao (35%), bổ sung vitamin C và D",
                            KoiGroupId = 3,
                            WeightPercent = 0.04m
                        },
                        new
                        {
                            Id = 8,
                            AgeRange = 2,
                            DailyFrequency = "2",
                            FoodDescription = "Protein 30%, bổ sung vi lượng tăng cường độ bóng",
                            KoiGroupId = 3,
                            WeightPercent = 0.015m
                        },
                        new
                        {
                            Id = 9,
                            AgeRange = 3,
                            DailyFrequency = "1",
                            FoodDescription = "Hạt lớn, protein thấp hơn nhưng nhiều xơ",
                            KoiGroupId = 3,
                            WeightPercent = 0.01m
                        },
                        new
                        {
                            Id = 10,
                            AgeRange = 1,
                            DailyFrequency = "3",
                            FoodDescription = "Hạt giàu protein (35-40%), dễ tiêu hóa",
                            KoiGroupId = 4,
                            WeightPercent = 0.04m
                        },
                        new
                        {
                            Id = 11,
                            AgeRange = 2,
                            DailyFrequency = "2",
                            FoodDescription = "Protein 30-35%, bổ sung chất béo cho sự phát triển",
                            KoiGroupId = 4,
                            WeightPercent = 0.015m
                        },
                        new
                        {
                            Id = 12,
                            AgeRange = 3,
                            DailyFrequency = "1",
                            FoodDescription = "Hạt tổng hợp, cân bằng dinh dưỡng",
                            KoiGroupId = 4,
                            WeightPercent = 0.01m
                        },
                        new
                        {
                            Id = 13,
                            AgeRange = 1,
                            DailyFrequency = "3",
                            FoodDescription = "Hạt giàu protein (35-40%), nhiều carotenoid",
                            KoiGroupId = 5,
                            WeightPercent = 0.04m
                        },
                        new
                        {
                            Id = 14,
                            AgeRange = 2,
                            DailyFrequency = "2",
                            FoodDescription = "Protein 30%, vitamin E và A",
                            KoiGroupId = 5,
                            WeightPercent = 0.015m
                        },
                        new
                        {
                            Id = 15,
                            AgeRange = 3,
                            DailyFrequency = "1",
                            FoodDescription = "Hạt bổ sung chất xơ và chất chống oxy hóa",
                            KoiGroupId = 5,
                            WeightPercent = 0.01m
                        });
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.WaterParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("MeasuredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal?>("NO2")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("NO3")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Oxygen")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("PO4")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Ph")
                        .HasColumnType("numeric");

                    b.Property<int>("PondId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Salinity")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PondId");

                    b.ToTable("WaterParameters");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.BlogPost", b =>
                {
                    b.HasOne("KoiCare.Domain.Entities.User", "Author")
                        .WithMany("BlogPosts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.FeedCalculation", b =>
                {
                    b.HasOne("KoiCare.Domain.Entities.KoiIndividual", "KoiIndividual")
                        .WithMany("FeedCalculations")
                        .HasForeignKey("KoiIndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KoiIndividual");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.FeedingSchedule", b =>
                {
                    b.HasOne("KoiCare.Domain.Entities.Pond", "Pond")
                        .WithMany("FeedingSchedules")
                        .HasForeignKey("PondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pond");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.KoiGrowth", b =>
                {
                    b.HasOne("KoiCare.Domain.Entities.KoiIndividual", "KoiIndividual")
                        .WithMany("KoiGrowths")
                        .HasForeignKey("KoiIndividualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KoiIndividual");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.KoiIndividual", b =>
                {
                    b.HasOne("KoiCare.Domain.Entities.KoiType", "KoiType")
                        .WithMany("KoiIndividuals")
                        .HasForeignKey("KoiTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KoiCare.Domain.Entities.Pond", "Pond")
                        .WithMany("KoiIndividuals")
                        .HasForeignKey("PondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KoiType");

                    b.Navigation("Pond");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.KoiType", b =>
                {
                    b.HasOne("KoiCare.Domain.Entities.KoiGroup", "KoiGroup")
                        .WithMany("KoiTypes")
                        .HasForeignKey("KoiGroupId");

                    b.Navigation("KoiGroup");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.Order", b =>
                {
                    b.HasOne("KoiCare.Domain.Entities.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.OrderDetail", b =>
                {
                    b.HasOne("KoiCare.Domain.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KoiCare.Domain.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.PerfectWaterVolume", b =>
                {
                    b.HasOne("KoiCare.Domain.Entities.KoiType", "KoiType")
                        .WithMany("PerfectWaterVolumes")
                        .HasForeignKey("KoiTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KoiType");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.Pond", b =>
                {
                    b.HasOne("KoiCare.Domain.Entities.KoiGroup", "KoiGroup")
                        .WithMany("Ponds")
                        .HasForeignKey("KoiGroupId");

                    b.HasOne("KoiCare.Domain.Entities.User", "User")
                        .WithMany("Ponds")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KoiGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.Product", b =>
                {
                    b.HasOne("KoiCare.Domain.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.SaltRequirement", b =>
                {
                    b.HasOne("KoiCare.Domain.Entities.Pond", "Pond")
                        .WithOne("SaltRequirement")
                        .HasForeignKey("KoiCare.Domain.Entities.SaltRequirement", "PondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pond");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.ServingSize", b =>
                {
                    b.HasOne("KoiCare.Domain.Entities.KoiGroup", "KoiGroup")
                        .WithMany("ServingSizes")
                        .HasForeignKey("KoiGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KoiGroup");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.User", b =>
                {
                    b.HasOne("KoiCare.Domain.Entities.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId");

                    b.HasOne("KoiCare.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.WaterParameter", b =>
                {
                    b.HasOne("KoiCare.Domain.Entities.Pond", "Pond")
                        .WithMany("WaterParameters")
                        .HasForeignKey("PondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pond");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.Gender", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.KoiGroup", b =>
                {
                    b.Navigation("KoiTypes");

                    b.Navigation("Ponds");

                    b.Navigation("ServingSizes");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.KoiIndividual", b =>
                {
                    b.Navigation("FeedCalculations");

                    b.Navigation("KoiGrowths");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.KoiType", b =>
                {
                    b.Navigation("KoiIndividuals");

                    b.Navigation("PerfectWaterVolumes");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.Pond", b =>
                {
                    b.Navigation("FeedingSchedules");

                    b.Navigation("KoiIndividuals");

                    b.Navigation("SaltRequirement")
                        .IsRequired();

                    b.Navigation("WaterParameters");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("KoiCare.Domain.Entities.User", b =>
                {
                    b.Navigation("BlogPosts");

                    b.Navigation("Orders");

                    b.Navigation("Ponds");
                });
#pragma warning restore 612, 618
        }
    }
}
